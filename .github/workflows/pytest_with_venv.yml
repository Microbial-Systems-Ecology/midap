name: Tests (Venv)

# Define when to run
on:
  schedule:
    - cron:  '30 4 1 * *'
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

# Env variables
env:
  CACHE_NUMBER: 0  # increase to reset cache manually


# Jobs
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3

    # date for the cache
    - name: Set cache date
      run: echo "DATE_YM=$(date +'%Y%m')" >> $GITHUB_ENV

    - name: Extract versions
      id: download_info
      shell: bash -l {0}
      run: |
        cat "midap/apps/download_info.json" | jq -r '.model_weights.version'
        echo "WEIGHTS_VERSION=$(cat midap/apps/download_info.json | jq -r '.model_weights.version')" >> $GITHUB_ENV
        echo "PSF_VERSION=$(cat midap/apps/download_info.json | jq -r '.psf.version')" >> $GITHUB_ENV
        echo "DATA_VERSION=$(cat midap/apps/download_info.json | jq -r '.example_data.version')" >> $GITHUB_ENV
        echo "WEIGHTS_NAME=$(cat midap/apps/download_info.json | jq -r '.model_weights.name')" >> $GITHUB_ENV
        echo "WEIGHTS_URL=$(cat midap/apps/download_info.json | jq -r '.model_weights.url')" >> $GITHUB_ENV

    - name: Cache weights
      uses: actions/cache@v3
      with:
        enableCrossOsArchive: 'true'
        path: |
          model_weights/model_weights_tracking/*
          model_weights/model_weights_legacy/model_weights_C-crescentus-CB15_mKate2_v01.h5
          model_weights/.success
          psf/.success
          example_data/.success
        key: ${{ env.DATE_YM }}-${{ env.CACHE_NUMBER }}-${{ env.WEIGHTS_VERSION }}-${{ env.DATA_VERSION }}-${{ env.PSF_VERSION }}
      id: cache_weights

    - name: Download weights
      shell: bash -l {0}
      run: |
        echo "Download weights"
        wget -O ${{ env.WEIGHTS_NAME }} ${{ env.WEIGHTS_URL }}
        echo "Extract model weights"
        unzip ${{ env.WEIGHTS_NAME }}
        echo "Remove zip-files"
        rm ${{ env.WEIGHTS_NAME }}
        echo "${{ env.WEIGHTS_VERSION }}" > model_weights/.success
        mkdir psf
        echo "${{ env.PSF_VERSION }}" > psf/.success
        mkdir example_data
        echo "${{ env.DATA_VERSION }}" > example_data/.success
      if: ${{ steps.cache_weights.outputs.cache-hit != 'true' }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # noraml requirements
        pip install -r ./euler/requirements.txt
        # tensorflow is usually taken from euler, minor flake for linting
        pip install tensorflow flake8
        # the package
        pip install -e .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. # TODO: talk about actualy linting and maybe black
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Run Tests
      run: |
        coverage run --source="midap" -m pytest -v tests
        coverage report -m

