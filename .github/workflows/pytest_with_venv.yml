name: Tests (Venv)

# Define when to run
on:
  schedule:
    - cron:  '30 4 1 * *'
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

# Env variables
env:
  CACHE_NUMBER: 0  # increase to reset cache manually


# Jobs
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3

    # date for the cache
    - name: Set cache date
      run: echo "DATE_YM=$(date +'%Y%m')" >> $GITHUB_ENV

    - name: Cache weights
      uses: actions/cache@v3
      with:
        path: |
          model_weights/model_weights_tracking/*
          model_weights/model_weights_family_mother_machine/model_weights_CB15-WT.h5
        key: ${{ env.DATE_YM }}-${{ env.CACHE_NUMBER }}
      id: cache_weights

    - name: Download weights
      run: |
        echo "Download weights"
        wget -O model_weights.zip https://polybox.ethz.ch/index.php/s/XoaFLr346h8GxzP/download
        echo "Extract model weights"
        unzip model_weights.zip
        echo "Remove zip-files"
        rm model_weights.zip
      if: ${{ steps.cache_weights.outputs.cache-hit != 'true' }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # noraml requirements
        pip install -r ./euler/requirements.txt
        # tensorflow is usually taken from euler, minor flake for linting
        pip install tensorflow flake8
        # the package
        pip install -e .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. # TODO: talk about actualy linting and maybe black
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Run Tests
      run: |
        coverage run --source="midap" -m pytest -v tests
        coverage report -m

