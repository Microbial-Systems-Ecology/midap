name: Tests (Conda)

# Define when to run
on:
  schedule:
    - cron:  '30 4 1 * *'
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

# Env variables
env:
  CACHE_NUMBER: 3  # increase to reset cache manually

# Jobs
jobs:
  preparation:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Env File
        id: check-env-file
        uses: tj-actions/changed-files@v46
        with:
          files: |
            environment.yml

      - name: Set Env
        # trigger if env file change or on schedule
        if: ${{ steps.check-env-file.outputs.any_changed == 'true' || github.event_name == 'schedule' }}
        run: echo "ENV_STATE=env_change" >> $GITHUB_ENV

      - name: Conditional Matrix
        id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@main
        with:
          # Run filter -> see matrix_includes.json!
          filter: '[?runs_when==`${{ env.ENV_STATE }}` || runs_when==`${{ github.event_name }}` || runs_when==`always`]'

      # date for the cache
      - name: Set cache date
        run: echo "DATE_YM=$(date +'%Y%m')" >> $GITHUB_ENV

      - name: Extract versions
        id: download_info
        shell: bash -l {0}
        run: |
          echo "WEIGHTS_VERSION=$(cat midap/apps/download_info.json | jq -r '.model_weights.version')" >> $GITHUB_ENV
          echo "PSF_VERSION=$(cat midap/apps/download_info.json | jq -r '.psf.version')" >> $GITHUB_ENV
          echo "DATA_VERSION=$(cat midap/apps/download_info.json | jq -r '.example_data.version')" >> $GITHUB_ENV
          echo "WEIGHTS_NAME=$(cat midap/apps/download_info.json | jq -r '.model_weights.name')" >> $GITHUB_ENV
          echo "WEIGHTS_URL=$(cat midap/apps/download_info.json | jq -r '.model_weights.url')" >> $GITHUB_ENV

      - name: Cache weights
        uses: actions/cache@v4
        with:
          enableCrossOsArchive: 'true'
          path: |
            model_weights/model_weights_tracking/*
            model_weights/model_weights_legacy/model_weights_C-crescentus-CB15_mKate2_v01.h5
            model_weights/.success
            psf/.success
            example_data/.success
          key: ${{ env.DATE_YM }}-${{ env.CACHE_NUMBER }}-${{ env.WEIGHTS_VERSION }}-${{ env.DATA_VERSION }}-${{ env.PSF_VERSION }}
        id: cache_weights

      - name: Download weights
        shell: bash -l {0}
        run: |
          echo "Download weights"
          wget -O ${{ env.WEIGHTS_NAME }} ${{ env.WEIGHTS_URL }}
          echo "Extract model weights"
          unzip ${{ env.WEIGHTS_NAME }}
          echo "Remove zip-files"
          rm ${{ env.WEIGHTS_NAME }}
          echo -n "${{ env.WEIGHTS_VERSION }}" > model_weights/.success
          mkdir psf
          echo -n "${{ env.PSF_VERSION }}" > psf/.success
          mkdir example_data
          echo -n "${{ env.DATA_VERSION }}" > example_data/.success
        if: ${{ steps.cache_weights.outputs.cache-hit != 'true' }}

  build:
    # the testing
    needs: preparation
    strategy:
      fail-fast: false # if true all jobs are cancelled if one fails
      matrix: ${{fromJson(needs.preparation.outputs.matrix)}}

    name: ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    steps:
      # checkout the dev branch
      - uses: actions/checkout@v4

      # setup the conda env
      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge
          miniforge-version: latest
          activate-environment: midap
          use-mamba: true
          auto-update-conda: false

      # date for the cache
      - name: Set cache date
        shell: bash -l {0}
        run: echo "DATE_YM=$(date +'%Y%m')" >> $GITHUB_ENV

      - name: Extract versions
        id: download_info
        shell: bash -l {0}
        run: |
          echo "WEIGHTS_VERSION=$(cat midap/apps/download_info.json | jq -r '.model_weights.version')" >> $GITHUB_ENV
          echo "PSF_VERSION=$(cat midap/apps/download_info.json | jq -r '.psf.version')" >> $GITHUB_ENV
          echo "DATA_VERSION=$(cat midap/apps/download_info.json | jq -r '.example_data.version')" >> $GITHUB_ENV
          echo "WEIGHTS_NAME=$(cat midap/apps/download_info.json | jq -r '.model_weights.name')" >> $GITHUB_ENV
          echo "WEIGHTS_URL=$(cat midap/apps/download_info.json | jq -r '.model_weights.url')" >> $GITHUB_ENV

      - name: Cache weights
        uses: actions/cache@v4
        with:
          enableCrossOsArchive: 'true'
          path: |
            model_weights/model_weights_tracking/*
            model_weights/model_weights_legacy/model_weights_C-crescentus-CB15_mKate2_v01.h5
            model_weights/.success
            psf/.success
            example_data/.success
          key: ${{ env.DATE_YM }}-${{ env.CACHE_NUMBER }}-${{ env.WEIGHTS_VERSION }}-${{ env.DATA_VERSION }}-${{ env.PSF_VERSION }}
        id: cache_weights

      # date for the cache
      - name: Set cache date
        shell: bash -l {0}
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # reset cache if env file changed
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        id: cache

      # This step is cached in case the env file was not changed
      - name: Update environment
        run: mamba env update -f environment.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install package
        shell: bash -l {0}
        run: pip install -e .

      - name: Run Tests 
        shell: bash -l {0}
        run: |
          coverage run --source="midap" -m pytest -v tests
          coverage report -m

      - name: Extract Coverage
        if: ${{ always() && matrix.label == 'linux-64' && github.event_name == 'push' }} # include always to overwrite cancel on failure of previous step
        shell: bash -l {0}
        run: |
          echo "COVERAGE_INT=$(coverage report -m | grep TOTAL | grep -oE '[0-9]+%' | grep -oE '[0-9]+')" >> $GITHUB_ENV
          echo "COVERAGE_FLT=$(coverage report -m --precision=2 | grep TOTAL | grep -oE '[0-9]+\.[0-9]+')" >> $GITHUB_ENV
      
      - name: Create Coverage Badge
        if: ${{ always() && matrix.label == 'linux-64' && github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.COVERAGE_SECRET }}
          gistID: 9219639a376674762e7e29e2fa3cfc9e
          filename: midap_coverage.json
          label: Coverage
          message: ${{ env.COVERAGE_FLT }}%
          valColorRange: ${{ env.COVERAGE_INT }}
          maxColorRange: 100
          minColorRange: 0

      #- name: Create Coverage Badges
      #  uses: jaywcjlove/coverage-badges-cli@main
      #schneegans/dynamic-badges-action@v1.6.0
      #  with:
      #    style: flat
      #    source: midap_coverage.json 
          #coverage/coverage-summary.json
      #    output: coverage/badges.svg
      #    jsonPath: totals.percent_covered
      
      #- name: Deploy
      #  uses: peaceiris/actions-gh-pages@v3
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    publish_dir: ./build
